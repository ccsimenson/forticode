import { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { SecurityScan } from '../SecurityScan';
import { SecurityScanResult, ScanOptions } from '../scan-service';

// Extend the interface to include our test method
declare module '../scan-service' {
  interface SecurityScanService {
    _testSetScanResults?: (results: Partial<SecurityScanResult>) => void;
  }
}

// Create a test implementation of SecurityScanService
class TestSecurityScanService {
  private _testScanResults: SecurityScanResult;
  
  constructor() {
    this._testScanResults = {
      owner: '',
      repoName: '',
      repository: '',
      branch: 'main',
      totalFiles: 0,
      scannedFiles: 0,
      issuesFound: 0,
      issues: [],
      status: 'pending',
      progress: 0,
      startTime: new Date(),
      endTime: undefined,
      error: ''
    };
  }
  
  async startScan(_options: ScanOptions): Promise<SecurityScanResult> {
    return this._testScanResults;
  }

  _testSetScanResults(results: Partial<SecurityScanResult>) {
    this._testScanResults = { ...this._testScanResults, ...results };
  }
}

// Mock the scan-service module
vi.mock('../scan-service', () => {
  // Define the mock service class inside the factory function
  class MockSecurityScanService {
    private _testScanResults: any;
    
    constructor() {
      this._testScanResults = {
        owner: '',
        repoName: '',
        repository: '',
        branch: 'main',
        totalFiles: 0,
        scannedFiles: 0,
        issuesFound: 0,
        issues: [],
        status: 'pending',
        progress: 0,
        startTime: new Date(),
        endTime: undefined,
        error: ''
      };

      return {
        _testSetScanResults: (results: any) => {
          this._testScanResults = { ...this._testScanResults, ...results };
        },
        startScan: async (options: any) => {
          return { ...this._testScanResults, ...options };
        }
      };
    }
  }

  return {
    ...actual,
    SecurityScanService: MockSecurityScanService
  };
});

import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/vitest';
import { SecurityScan } from '../SecurityScan';
import { vi, describe, it, expect, beforeEach } from 'vitest';

describe('SecurityScan', () => {
  let mockScanComplete: ReturnType<typeof vi.fn> & { mock: any };
  let mockSecurityScanService: InstanceType<typeof TestSecurityScanService>;

  beforeEach(() => {
    mockScanComplete = jest.fn();
    // Create a new instance of the mocked SecurityScanService
    mockSecurityScanService = new TestSecurityScanService();
    // Reset the mock implementation
    (mockSecurityScanService.startScan as jest.Mock).mockClear();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('UI rendering', () => {
    it('should render initial state correctly', () => {
      render(<SecurityScan onScanComplete={mockScanComplete} />);

      expect(screen.getByText('Security Scanner')).toBeInTheDocument();
      expect(screen.getByText('Start Scan')).toBeInTheDocument();
    });

    it('should show loading state during scan', () => {
      // Set up the test data for loading state
      const scanResults = {
        repository: 'test/repo',
        branch: 'main',
        owner: 'test',
        repoName: 'repo',
        totalFiles: 10,
        scannedFiles: 5,
        issuesFound: 0,
        issues: [],
        status: 'running' as const,
        progress: 50,
        startTime: new Date(),
        endTime: undefined,
        error: ''
      };
      
      // Use the test helper method to set the loading state
      mockSecurityScanService._testSetScanResults?.(scanResults);
      
      // Mock the startScan method to return a promise that never resolves
      // to simulate an ongoing scan
      (mockSecurityScanService.startScan as jest.Mock).mockImplementation(() => 
        new Promise(() => {})
      );

      render(<SecurityScan onScanComplete={mockScanComplete} />);

      // Click the start scan button
      const startButton = screen.getByText('Start Scan');
      startButton.click();

      // Check that the loading state is shown
      expect(screen.getByText('Scanning...')).toBeInTheDocument();
      expect(screen.getByText('50%')).toBeInTheDocument();
    });

    it('should show scan results', () => {
      // Set up the test data
      const scanResults = {
        owner: 'test',
        repoName: 'repo',
        repository: 'test/repo',
        branch: 'main',
        totalFiles: 10,
        scannedFiles: 10,
        issuesFound: 2,
        issues: [
          {
            path: 'test.txt',
            line: 1,
            severity: 'critical' as const,
            type: 'hardcoded-credential',
            description: 'Potential security issue found: hardcoded-credential'
          }
        ],
        status: 'completed' as const,
        progress: 100,
        startTime: new Date(),
        endTime: new Date(),
        error: ''
      };
      
      // Use the test helper method to set the scan results
      mockSecurityScanService._testSetScanResults(scanResults);

      render(<SecurityScan onScanComplete={mockScanComplete} />);

      expect(screen.getByText('Scan Results')).toBeInTheDocument();
      expect(screen.getByText('Repository: test/repo')).toBeInTheDocument();
      expect(screen.getByText('Issues found: 2')).toBeInTheDocument();
      expect(screen.getByText('Path: test.txt')).toBeInTheDocument();
    });
  });

  describe('Interactions', () => {
    it('should start scan when button clicked', async () => {
      const mockStartScan = jest.fn().mockResolvedValue({
        repository: 'test/repo',
        branch: 'main',
        status: 'completed'
      });

      mockSecurityScanService.startScan = mockStartScan;

      render(<SecurityScan onScanComplete={mockScanComplete} />);
      const scanButton = screen.getByText('Start Scan');

      fireEvent.click(scanButton);

      await waitFor(() => {
        expect(mockStartScan).toHaveBeenCalled();
      });
    });
  });

  describe('Error handling', () => {
    it('should handle scan errors gracefully', async () => {
      // Set up the test data for error case
      const errorResults = {
        owner: 'test',
        repoName: 'repo',
        repository: 'test/repo',
        branch: 'main',
        totalFiles: 0,
        scannedFiles: 0,
        issuesFound: 0,
        issues: [],
        status: 'error' as const,
        progress: 0,
        startTime: new Date(),
        endTime: new Date(),
        error: 'Scan failed'
      };
      
      // Use the test helper method to set the error state
      mockSecurityScanService._testSetScanResults(errorResults);

      render(<SecurityScan onScanComplete={mockScanComplete} />);

      expect(screen.getByText('Scan failed')).toBeInTheDocument();
    });
  });
});
