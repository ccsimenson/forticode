{"version":3,"file":"github.service.js","sourceRoot":"","sources":["github.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { webhookHandler, WebhookHandler } from './webhook-handler';\nimport type { \n  GitHubWebhookPayload,\n  GitHubFileContent\n} from './types';\n\n// Simple console-based logger to avoid import issues\nconst logger = {\n  info: (message: string, ...args: unknown[]) => console.log(`[INFO] ${message}`, ...args),\n  error: (message: string, ...args: unknown[]) => console.error(`[ERROR] ${message}`, ...args),\n  debug: (message: string, ...args: unknown[]) => console.debug(`[DEBUG] ${message}`, ...args),\n  warn: (message: string, ...args: unknown[]) => console.warn(`[WARN] ${message}`, ...args)\n};\n\n/**\n * Options for GitHub service methods\n */\nexport interface GitHubServiceOptions {\n  owner: string;\n  repo: string;\n  path?: string;\n  ref?: string;\n}\n\n/**\n * Service for interacting with GitHub API and handling webhook events\n */\nexport class GitHubService {\n  private token: string | null;\n  private webhookHandler: WebhookHandler;\n  private baseUrl: string;\n\n  /**\n   * Create a new GitHub service instance\n   * @param token - Optional GitHub personal access token for API authentication\n   */\n  constructor(token: string | null = null) {\n    this.token = token;\n    this.baseUrl = 'https://api.github.com';\n    this.webhookHandler = webhookHandler;\n  }\n\n  /**\n   * Make an authenticated request to the GitHub API\n   * @param endpoint - The API endpoint (e.g., '/repos/owner/repo')\n   * @param options - Fetch options\n   * @returns A promise that resolves to the response data\n   */\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const headers = new Headers(options.headers);\n    headers.set('Accept', 'application/vnd.github.v3+json');\n    headers.set('Content-Type', 'application/json');\n    \n    if (this.token) {\n      headers.set('Authorization', `token ${this.token}`);\n    }\n    \n    const config: RequestInit = {\n      ...options,\n      headers,\n    };\n    \n    try {\n      const response = await fetch(url, config);\n\n      if (!response.ok) {\n        const errorData = (await response.json().catch(() => ({}))) as { message?: string };\n        const errorMessage = `GitHub API request failed with status ${response.status}: ${errorData.message || 'Unknown error'}`;\n        logger.error(errorMessage);\n        throw new Error(errorMessage);\n      }\n\n      // For 204 No Content responses, return null\n      if (response.status === 204) {\n        return null as unknown as T;\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      logger.error('GitHub API request failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get repository contents\n   * @param options - Repository and path options\n   * @returns A promise that resolves to the repository contents\n   */\n  async getContents(options: GitHubServiceOptions): Promise<GitHubFileContent | GitHubFileContent[]> {\n    const { owner, repo, path = '', ref = 'main' } = options;\n    const endpoint = `/repos/${owner}/${repo}/contents/${path}?ref=${ref}`;\n    return this.request<GitHubFileContent | GitHubFileContent[]>(endpoint);\n  }\n\n  /**\n   * Get file content from a repository\n   * @param options - Repository and file options\n   * @returns A promise that resolves to the file content as a string\n   */\n  async getFileContent(options: GitHubServiceOptions): Promise<string> {\n    const { owner, repo, path, ref } = options;\n    \n    if (!path) {\n      throw new Error('Path is required for getFileContent');\n    }\n\n    const endpoint = `/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}` \n      + (ref ? `?ref=${encodeURIComponent(ref)}` : '');\n\n    const response = await this.request<GitHubFileContent>(endpoint);\n    \n    if (response.content) {\n      // GitHub returns base64 encoded content\n      return Buffer.from(response.content, 'base64').toString('utf-8');\n    }\n    \n    throw new Error('Content not found in response');\n  }\n\n  /**\n   * Handle a GitHub webhook event\n   * @param event - The GitHub event name\n   * @param payload - The webhook payload\n   */\n  async handleWebhookEvent(event: string, payload: GitHubWebhookPayload): Promise<void> {\n    try {\n      logger.info(`Processing ${event} event`);\n      await this.webhookHandler.handleEvent(event, payload);\n    } catch (error) {\n      logger.error(`Error handling ${event} event:`, error);\n      throw error;\n    }\n  }\n}\n\n// Export the service\nexport default GitHubService;\n"]}