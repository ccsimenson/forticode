{"version":3,"file":"github-auth.js","sourceRoot":"","sources":["github-auth.ts"],"names":[],"mappings":";;AAKA,4CAoBC;AAvBD;;GAEG;AACH,SAAgB,gBAAgB,CAAC,OAAwB;IACvD,OAAO;QACL,yDAAyD;QACzD,KAAK,CAAC,QAAQ;YACZ,uEAAuE;YACvE,6CAA6C;YAC7C,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qCAAqC;QACrC,KAAK,CAAC,YAAY;YAChB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC;QAED,4CAA4C;QAC5C,KAAK,CAAC,iBAAiB,CAAC,MAAc,EAAE,KAAa;YACnD,mEAAmE;YACnE,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { GitHubAppConfig } from './types';\n\n/**\n * Creates a GitHub authentication instance\n */\nexport function createGithubAuth(_config: GitHubAppConfig) {\n  return {\n    // Returns a token for authenticating with the GitHub API\n    async getToken(): Promise<string> {\n      // In a real implementation, this would exchange the installation token\n      // For now, we'll just return an empty string\n      return '';\n    },\n    \n    // Refreshes the authentication token\n    async refreshToken(): Promise<string> {\n      return this.getToken();\n    },\n    \n    // Gets the installation ID for a repository\n    async getInstallationId(_owner: string, _repo: string): Promise<number | null> {\n      // In a real implementation, this would look up the installation ID\n      return null;\n    }\n  };\n}\n"]}