{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Type definitions for GitHub API responses and webhook payloads\n */\n\n// Base types\nexport interface GitHubUser {\n  login: string;\n  id: number;\n  node_id: string;\n  avatar_url: string;\n  html_url: string;\n  type: 'User' | 'Bot' | 'Organization' | 'Mannequin';\n  site_admin: boolean;\n}\n\nexport interface GitHubRepository {\n  id: number;\n  node_id: string;\n  name: string;\n  full_name: string;\n  private: boolean;\n  owner: GitHubUser;\n  html_url: string;\n  description: string | null;\n  fork: boolean;\n  url: string;\n  created_at: string;\n  updated_at: string;\n  pushed_at: string;\n  default_branch: string;\n}\n\nexport interface GitHubCommit {\n  id: string;\n  tree_id: string;\n  message: string;\n  timestamp: string;\n  author: {\n    name: string;\n    email: string;\n    username?: string;\n  };\n  committer: {\n    name: string;\n    email: string;\n    username?: string;\n  };\n  added: string[];\n  removed: string[];\n  modified: string[];\n}\n\n// Webhook payload types\nexport interface GitHubWebhookPayload {\n  action?: string;\n  repository: GitHubRepository;\n  sender: GitHubUser;\n  organization?: {\n    login: string;\n    id: number;\n    node_id: string;\n    url: string;\n    html_url: string;\n  };\n  installation?: {\n    id: number;\n    node_id: string;\n  };\n}\n\nexport interface GitHubAppConfig {\n  id: number;\n  privateKey: string;\n  webhookSecret: string;\n  clientId: string;\n  clientSecret: string;\n}\n\nexport interface GitHubPullRequestPayload extends GitHubWebhookPayload {\n  action: 'opened' | 'edited' | 'closed' | 'reopened' | 'synchronize' | 'assigned' | 'unassigned' | 'review_requested' | 'review_request_removed' | 'ready_for_review' | 'converted_to_draft' | 'labeled' | 'unlabeled';\n  number: number;\n  pull_request: {\n    url: string;\n    id: number;\n    node_id: string;\n    html_url: string;\n    diff_url: string;\n    patch_url: string;\n    issue_url: string;\n    number: number;\n    state: 'open' | 'closed';\n    locked: boolean;\n    title: string;\n    user: GitHubUser;\n    body: string | null;\n    created_at: string;\n    updated_at: string;\n    closed_at: string | null;\n    merged_at: string | null;\n    merge_commit_sha: string | null;\n    assignee: GitHubUser | null;\n    assignees: GitHubUser[];\n    requested_reviewers: GitHubUser[];\n    labels: Array<{\n      id: number;\n      node_id: string;\n      url: string;\n      name: string;\n      description: string | null;\n      color: string;\n      default: boolean;\n    }>;\n    head: {\n      label: string;\n      ref: string;\n      sha: string;\n      user: GitHubUser;\n      repo: GitHubRepository;\n    };\n    base: {\n      label: string;\n      ref: string;\n      sha: string;\n      user: GitHubUser;\n      repo: GitHubRepository;\n    };\n    author_association: 'COLLABORATOR' | 'CONTRIBUTOR' | 'FIRST_TIMER' | 'FIRST_TIME_CONTRIBUTOR' | 'MANNEQUIN' | 'MEMBER' | 'NONE' | 'OWNER';\n    draft: boolean;\n    merged: boolean;\n    mergeable: boolean | null;\n    rebaseable: boolean | null;\n    mergeable_state: string;\n    merged_by: GitHubUser | null;\n    comments: number;\n    review_comments: number;\n    maintainer_can_modify: boolean;\n    commits: number;\n    additions: number;\n    deletions: number;\n    changed_files: number;\n  };\n}\n\nexport interface GitHubPushPayload extends GitHubWebhookPayload {\n  ref: string;\n  before: string;\n  after: string;\n  created: boolean;\n  deleted: boolean;\n  forced: boolean;\n  base_ref: string | null;\n  compare: string;\n  commits: GitHubCommit[];\n  head_commit: GitHubCommit | null;\n  repository: GitHubRepository & {\n    id: number;\n    node_id: string;\n    full_name: string;\n    private: boolean;\n    owner: GitHubUser;\n    html_url: string;\n    description: string | null;\n    fork: boolean;\n    url: string;\n    created_at: number;\n    updated_at: string;\n    pushed_at: number;\n    git_url: string;\n    ssh_url: string;\n    clone_url: string;\n    default_branch: string;\n  };\n  pusher: {\n    name: string;\n    email: string;\n  };\n  sender: GitHubUser;\n}\n\nexport interface GitHubIssuePayload extends GitHubWebhookPayload {\n  action: 'opened' | 'edited' | 'deleted' | 'pinned' | 'unpinned' | 'closed' | 'reopened' | 'assigned' | 'unassigned' | 'labeled' | 'unlabeled' | 'locked' | 'unlocked' | 'transferred' | 'milestoned' | 'demilestoned';\n  issue: {\n    url: string;\n    repository_url: string;\n    labels_url: string;\n    comments_url: string;\n    events_url: string;\n    html_url: string;\n    id: number;\n    node_id: string;\n    number: number;\n    title: string;\n    user: GitHubUser;\n    labels: Array<{\n      id: number;\n      node_id: string;\n      url: string;\n      name: string;\n      description: string | null;\n      color: string;\n      default: boolean;\n    }>;\n    state: 'open' | 'closed';\n    locked: boolean;\n    assignee: GitHubUser | null;\n    assignees: GitHubUser[];\n    milestone: {\n      url: string;\n      html_url: string;\n      labels_url: string;\n      id: number;\n      node_id: string;\n      number: number;\n      title: string;\n      description: string | null;\n      creator: GitHubUser;\n      open_issues: number;\n      closed_issues: number;\n      state: 'open' | 'closed';\n      created_at: string;\n      updated_at: string;\n      due_on: string | null;\n      closed_at: string | null;\n    } | null;\n    comments: number;\n    created_at: string;\n    updated_at: string;\n    closed_at: string | null;\n    author_association: 'COLLABORATOR' | 'CONTRIBUTOR' | 'FIRST_TIMER' | 'FIRST_TIME_CONTRIBUTOR' | 'MANNEQUIN' | 'MEMBER' | 'NONE' | 'OWNER';\n    active_lock_reason: 'too heated' | 'off-topic' | 'resolved' | 'spam' | null;\n    body: string | null;\n    performed_via_github_app: {\n      id: number;\n      node_id: string;\n      owner: GitHubUser;\n      name: string;\n      description: string | null;\n      external_url: string;\n      html_url: string;\n      created_at: string;\n      updated_at: string;\n      permissions: Record<string, string>;\n      events: string[];\n    } | null;\n  };\n  changes?: {\n    title?: {\n      from: string;\n    };\n    body?: {\n      from: string;\n    };\n  };\n  label?: {\n    id: number;\n    node_id: string;\n    url: string;\n    name: string;\n    description: string | null;\n    color: string;\n    default: boolean;\n  };\n}\n\n// API response types\nexport interface GitHubFileContent {\n  content: string;\n  encoding: string;\n  sha: string;\n  size: number;\n  url: string;\n  path: string;\n  name: string;\n}\n\nexport interface GitHubFileInfo {\n  type: string;\n  size: number;\n  name: string;\n  path: string;\n  content?: string;\n  sha: string;\n  url: string;\n  git_url: string;\n  html_url: string;\n  download_url: string | null;\n}\n\nexport interface GitHubBranch {\n  name: string;\n  commit: {\n    sha: string;\n    url: string;\n  };\n  protected: boolean;\n  protection?: {\n    enabled: boolean;\n    required_status_checks: {\n      enforcement_level: string;\n      contexts: string[];\n    };\n  };\n  protection_url?: string;\n}\n\n// Event types\nexport type GitHubEvent =\n  | 'pull_request'\n  | 'push'\n  | 'issues'\n  | 'issue_comment'\n  | 'pull_request_review'\n  | 'pull_request_review_comment'\n  | 'pull_request_review_thread'\n  | 'create'\n  | 'delete'\n  | 'fork'\n  | 'release'\n  | 'member'\n  | 'public'\n  | 'status'\n  | 'watch'\n  | 'deployment_status';\n\nexport type GitHubEventHandler = (payload: GitHubWebhookPayload) => Promise<void> | void;\n\ntype EventHandlerMap = {\n  pull_request: (payload: GitHubPullRequestPayload) => Promise<void> | void;\n  push: (payload: GitHubPushPayload) => Promise<void> | void;\n  issues: (payload: GitHubIssuePayload) => Promise<void> | void;\n  [K: string]: ((payload: any) => Promise<void> | void) | undefined;\n};\n\nexport type GitHubEventHandlers = Partial<EventHandlerMap>;\n"]}