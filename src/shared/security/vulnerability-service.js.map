{"version":3,"file":"vulnerability-service.js","sourceRoot":"","sources":["vulnerability-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { NvdVulnerability } from './types';\nimport axios from 'axios';\n\nexport class VulnerabilityService {\n    private static instance: VulnerabilityService;\n    private cache: Map<string, { vulnerabilities: NvdVulnerability[]; timestamp: number }> = new Map();\n    private cacheTimeout = 24 * 60 * 60 * 1000;\n\n    private constructor() {\n        // Clear expired cache entries when service is instantiated\n        this.clearExpiredCacheEntries();\n    }\n\n    static getInstance(): VulnerabilityService {\n        if (!VulnerabilityService.instance) {\n            VulnerabilityService.instance = new VulnerabilityService();\n        }\n        return VulnerabilityService.instance;\n    }\n\n    private clearExpiredCacheEntries() {\n        const now = Date.now();\n        for (const [key, entry] of this.cache.entries()) {\n            if (now - entry.timestamp > this.cacheTimeout) {\n                this.cache.delete(key);\n            }\n        }\n    }\n\n    private generateCpe(packageName: string, version?: string): string {\n        // Format: cpe:2.3:a:vendor:product:version:*:*:*:*:*:*:*\n        return `cpe:2.3:a:${packageName.toLowerCase().replace(/[^a-z0-9]/g, '_')}:${packageName.toLowerCase().replace(/[^a-z0-9]/g, '_')}:${version || '*'}:*:*:*:*:*:*:*`;\n    }\n\n    private async getPackageVulnerabilities(packageName: string, version?: string): Promise<NvdVulnerability[]> {\n        const cacheKey = `${packageName}:${version || 'latest'}`;\n        const cachedEntry = this.cache.get(cacheKey);\n        \n        if (cachedEntry && Date.now() - cachedEntry.timestamp < this.cacheTimeout) {\n            return cachedEntry.vulnerabilities;\n        }\n\n        try {\n            const cpe = this.generateCpe(packageName, version);\n            const vulnerabilities = await this.fetchVulnerabilities(cpe);\n            const mappedVulnerabilities = vulnerabilities.map(vuln => this.mapNvdVulnerability(vuln));\n\n            this.cache.set(cacheKey, {\n                timestamp: Date.now(),\n                vulnerabilities: mappedVulnerabilities\n            });\n\n            return mappedVulnerabilities;\n        } catch (error) {\n            console.error(`Error checking vulnerabilities for ${packageName}@${version}:`, error);\n            throw error;\n        }\n    }\n\n    public async checkNodeVersionVulnerabilities(nodeVersion: string): Promise<NvdVulnerability[]> {\n        try {\n            return await this.getPackageVulnerabilities('node', nodeVersion);\n        } catch (error) {\n            console.error('Error checking Node.js version vulnerabilities:', error);\n            return [];\n        }\n    }\n\n    public async checkElectronVersionVulnerabilities(electronVersion: string): Promise<NvdVulnerability[]> {\n        try {\n            return await this.getPackageVulnerabilities('electron', electronVersion);\n        } catch (error) {\n            console.error('Error checking Electron version vulnerabilities:', error);\n            return [];\n        }\n    }\n\n    public async checkPackageDependenciesVulnerabilities(packageList: Record<string, string>): Promise<NvdVulnerability[]> {\n        const vulnerabilities: NvdVulnerability[] = [];\n        const checkDependency = async (packageName: string, version: string) => {\n            try {\n                const vulns = await this.getPackageVulnerabilities(packageName, version);\n                vulnerabilities.push(...vulns);\n            } catch (error) {\n                console.error(`Error checking vulnerabilities for ${packageName}@${version}:`, error);\n            }\n        };\n\n        await Promise.all(\n            Object.entries(packageList).map(([name, version]) => checkDependency(name, version))\n        );\n\n        return vulnerabilities;\n    }\n\n    private async fetchVulnerabilities(cpe: string): Promise<NvdVulnerability[]> {\n        try {\n            const response = await axios.get(`https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=${encodeURIComponent(cpe)}`);\n            return response.data.vulnerabilities.map((vuln: any) => this.mapNvdVulnerability(vuln));\n        } catch (error) {\n            console.error(`Error fetching vulnerabilities for CPE ${cpe}:`, error);\n            throw error;\n        }\n    }\n\n    private mapNvdVulnerability(vulnerability: any): NvdVulnerability {\n        const cve = vulnerability.cve;\n        const metrics = cve.metrics.cvssMetricV31[0];\n        return {\n            id: cve.id,\n            name: cve.id,\n            version: '',\n            severity: metrics.cvssData.baseSeverity.toLowerCase() as 'critical' | 'high' | 'medium' | 'low',\n            description: cve.descriptions[0].value,\n            references: cve.references.map((r: any) => r.url),\n            published: cve.published,\n            lastModified: cve.lastModified,\n            cvssScore: metrics.cvssData.baseScore,\n            vectorString: metrics.cvssData.vectorString,\n            affectedVersions: []\n        };\n    }\n}\n"]}