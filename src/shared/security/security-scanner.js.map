{"version":3,"file":"security-scanner.js","sourceRoot":"","sources":["security-scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { ipcRenderer } from 'electron';\nimport { SecurityCheck, SecurityScanResult, NvdVulnerability as Vulnerability, SecurityHeaders, NodeSecurityConfig, ElectronSecurityConfig, ConfigFile, SecurityCheckResult } from './types';\n\nexport class SecurityScanner {\n    private static instance: SecurityScanner;\n    private checks: SecurityCheck[];\n\n    private createErrorResult(checkName: string, error: unknown): SecurityCheckResult {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        return {\n            name: checkName,\n            valid: false,\n            errors: [errorMessage],\n            details: { error: errorMessage }\n        };\n    }\n\n    private createSuccessResult(checkName: string, details: any = {}, errors: string[] = []): SecurityCheckResult {\n        return {\n            name: checkName,\n            valid: true,\n            errors,\n            details\n        };\n    }\n\n    private createFailureResult(checkName: string, details: any = {}, errors: string[] = ['Check failed']): SecurityCheckResult {\n        return {\n            name: checkName,\n            valid: false,\n            errors,\n            details\n        };\n    }\n\n    private constructor() {\n        this.checks = [\n            this.createSecurityHeadersCheck(),\n            this.createDependencyCheck(),\n            this.createNodeSecurityCheck(),\n            this.createElectronSecurityCheck(),\n            this.createConfigValidationCheck()\n        ];\n    }\n\n    public static getInstance(): SecurityScanner {\n        if (!SecurityScanner.instance) {\n            SecurityScanner.instance = new SecurityScanner();\n        }\n        return SecurityScanner.instance;\n    }\n\n    public async runFullScan(): Promise<SecurityScanResult> {\n        const results: SecurityScanResult = {\n            timestamp: new Date(),\n            checks: []\n        };\n\n        for (const check of this.checks) {\n            try {\n                const result = await check.run();\n                results.checks.push({\n                    name: check.name,\n                    result,\n                    status: result.valid ? 'PASS' : 'FAIL'\n                });\n            } catch (error) {\n                results.checks.push({\n                    name: check.name,\n                    result: this.createErrorResult(check.name, error),\n                    status: 'ERROR'\n                });\n            }\n        }\n\n        return results;\n    }\n\n    private createSecurityHeadersCheck(): SecurityCheck {\n        const checkName = 'Security Headers Validation';\n        return {\n            name: checkName,\n            run: async (): Promise<SecurityCheckResult> => {\n                try {\n                    const headers: SecurityHeaders = await ipcRenderer.invoke('get-security-headers');\n                    const checks = {\n                        'X-Content-Type-Options': headers['X-Content-Type-Options'] === 'nosniff',\n                        'X-Frame-Options': headers['X-Frame-Options'] === 'DENY' || headers['X-Frame-Options'] === 'SAMEORIGIN',\n                        'X-XSS-Protection': headers['X-XSS-Protection'] === '1; mode=block',\n                        'Content-Security-Policy': !!headers['Content-Security-Policy']\n                    };\n                    \n                    const allValid = Object.values(checks).every(Boolean);\n                    if (allValid) {\n                        return this.createSuccessResult(checkName, { checks });\n                    } else {\n                        return this.createFailureResult(\n                            checkName, \n                            { checks },\n                            ['Some security headers are missing or misconfigured']\n                        );\n                    }\n                } catch (error) {\n                    return this.createErrorResult(checkName, error);\n                }\n            }\n        };\n    }\n\n    private createDependencyCheck(): SecurityCheck {\n        const checkName = 'Dependency Vulnerability Scan';\n        return {\n            name: checkName,\n            run: async (): Promise<SecurityCheckResult> => {\n                try {\n                    const vulnerabilities: Vulnerability[] = await ipcRenderer.invoke('scan-dependencies');\n                    const hasVulnerabilities = vulnerabilities.length > 0;\n                    const details = {\n                        totalDependencies: vulnerabilities.length,\n                        critical: vulnerabilities.filter(v => v.severity === 'critical').length,\n                        high: vulnerabilities.filter(v => v.severity === 'high').length,\n                        medium: vulnerabilities.filter(v => v.severity === 'medium').length,\n                        low: vulnerabilities.filter(v => v.severity === 'low').length,\n                        vulnerabilities\n                    };\n\n                    if (hasVulnerabilities) {\n                        return this.createFailureResult(\n                            checkName,\n                            details,\n                            ['Vulnerable dependencies found']\n                        );\n                    } else {\n                        return this.createSuccessResult(checkName, details);\n                    }\n                } catch (error) {\n                    return this.createErrorResult(checkName, error);\n                }\n            }\n        };\n    }\n\n    private createNodeSecurityCheck(): SecurityCheck {\n        const checkName = 'Node.js Security Best Practices';\n        return {\n            name: checkName,\n            run: async (): Promise<SecurityCheckResult> => {\n                try {\n                    const nodeConfig: NodeSecurityConfig = await ipcRenderer.invoke('get-node-config');\n                    const isValid = this.validateNodeSecurity(nodeConfig);\n                    const details = {\n                        nodeVersion: nodeConfig.version,\n                        securitySettings: nodeConfig.security,\n                        auditEnabled: nodeConfig.audit\n                    };\n\n                    if (isValid) {\n                        return this.createSuccessResult(checkName, details);\n                    } else {\n                        return this.createFailureResult(\n                            checkName,\n                            details,\n                            ['Node.js security configuration is not optimal']\n                        );\n                    }\n                } catch (error) {\n                    return this.createErrorResult(checkName, error);\n                }\n            }\n        };\n    }\n\n    private createElectronSecurityCheck(): SecurityCheck {\n        const checkName = 'Electron Security Configuration';\n        return {\n            name: checkName,\n            run: async (): Promise<SecurityCheckResult> => {\n                try {\n                    const electronConfig: ElectronSecurityConfig = await ipcRenderer.invoke('get-electron-config');\n                    const isValid = this.validateElectronSecurity(electronConfig);\n                    const details = {\n                        contextIsolation: electronConfig.contextIsolation,\n                        nodeIntegration: electronConfig.nodeIntegration,\n                        sandbox: electronConfig.sandbox\n                    };\n\n                    if (isValid) {\n                        return this.createSuccessResult(checkName, details);\n                    } else {\n                        return this.createFailureResult(\n                            checkName,\n                            details,\n                            ['Electron security configuration is not optimal']\n                        );\n                    }\n                } catch (error) {\n                    return this.createErrorResult(checkName, error);\n                }\n            }\n        };\n    }\n\n    private createConfigValidationCheck(): SecurityCheck {\n        const checkName = 'Configuration File Validation';\n        return {\n            name: checkName,\n            run: async (): Promise<SecurityCheckResult> => {\n                try {\n                    const configFiles: ConfigFile[] = await ipcRenderer.invoke('get-config-files');\n                    const validFiles = configFiles.filter(file => file.valid);\n                    const invalidFiles = configFiles.filter(file => !file.valid);\n                    \n                    const allValid = invalidFiles.length === 0;\n                    const details = {\n                        validFiles: validFiles.map(file => file.path),\n                        invalidFiles: invalidFiles.map(file => ({\n                            path: file.path,\n                            errors: file.errors || []\n                        }))\n                    };\n\n                    if (allValid) {\n                        return this.createSuccessResult(checkName, details);\n                    } else {\n                        return this.createFailureResult(\n                            checkName,\n                            details,\n                            ['Some configuration files are invalid']\n                        );\n                    }\n                } catch (error) {\n                    return this.createErrorResult(checkName, error);\n                }\n            }\n        };\n    }\n\n    private validateNodeSecurity(config: NodeSecurityConfig): boolean {\n        return config.version.startsWith('18.') &&\n               config.security?.strictSSL === true &&\n               config.audit === true;\n    }\n\n    private validateElectronSecurity(config: ElectronSecurityConfig): boolean {\n        return config.contextIsolation === true &&\n               config.nodeIntegration === false &&\n               config.sandbox === true;\n    }\n}\n"]}