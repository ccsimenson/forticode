{"version":3,"file":"ipc.js","sourceRoot":"","sources":["ipc.ts"],"names":[],"mappings":";;;AAAA,4DAA4D;AAC5D,IAAY,WAiCX;AAjCD,WAAY,WAAW;IACrB,kBAAkB;IAClB,kDAAmC,CAAA;IACnC,kDAAmC,CAAA;IACnC,4CAA6B,CAAA;IAC7B,0DAA2C,CAAA;IAE3C,kBAAkB;IAClB,sCAAuB,CAAA;IACvB,sCAAuB,CAAA;IAEvB,iBAAiB;IACjB,4CAA6B,CAAA;IAC7B,4CAA6B,CAAA;IAC7B,sCAAuB,CAAA;IAEvB,iBAAiB;IACjB,8CAA+B,CAAA;IAC/B,4CAA6B,CAAA;IAE7B,qBAAqB;IACrB,0DAA2C,CAAA;IAC3C,oDAAqC,CAAA;IACrC,oDAAqC,CAAA;IAErC,WAAW;IACX,4CAA6B,CAAA;IAC7B,kDAAmC,CAAA;IAEnC,UAAU;IACV,kDAAmC,CAAA;IACnC,mDAAoC,CAAA;IACpC,iDAAkC,CAAA;AACpC,CAAC,EAjCW,WAAW,2BAAX,WAAW,QAiCtB;AAyBD,8CAA8C;AAC9C,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,mCAAa,CAAA;IACb,yCAAmB,CAAA;IACnB,qCAAe,CAAA;IACf,2CAAqB,CAAA;AACvB,CAAC,EALW,kBAAkB,kCAAlB,kBAAkB,QAK7B","sourcesContent":["// Define all IPC channel names in one place for type safety\nexport enum IpcChannels {\n  // Window controls\n  WINDOW_MINIMIZE = 'window:minimize',\n  WINDOW_MAXIMIZE = 'window:maximize',\n  WINDOW_CLOSE = 'window:close',\n  WINDOW_IS_MAXIMIZED = 'window:is-maximized',\n  \n  // File operations\n  FILE_OPEN = 'file:open',\n  FILE_SAVE = 'file:save',\n  \n  // CSP operations\n  CSP_VALIDATE = 'csp:validate',\n  CSP_GENERATE = 'csp:generate',\n  CSP_APPLY = 'csp:apply',\n  \n  // Security scans\n  SECURITY_SCAN = 'security:scan',\n  SECURITY_FIX = 'security:fix',\n  \n  // GitHub integration\n  GITHUB_AUTHENTICATE = 'github:authenticate',\n  GITHUB_SCAN_REPO = 'github:scan-repo',\n  GITHUB_GET_REPOS = 'github:get-repos',\n  \n  // Settings\n  SETTINGS_GET = 'settings:get',\n  SETTINGS_UPDATE = 'settings:update',\n  \n  // Updates\n  CHECK_FOR_UPDATES = 'updates:check',\n  DOWNLOAD_UPDATE = 'updates:download',\n  INSTALL_UPDATE = 'updates:install'\n}\n\n// Define the shape of the data for each channel\nexport interface IpcRequest<T = any> {\n  id: string;\n  method: string;\n  params?: T;\n}\n\nexport interface IpcResponse<T = any> {\n  id: string;\n  result?: T;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\n// Define specific request/response types for each channel\nexport interface CspValidationRequest {\n  csp: string;\n  filePath?: string;\n}\n\n/** Severity levels for validation messages */\nexport enum ValidationSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical'\n}\n\n/** Source type for CSP directives */\nexport type CspSource = \n  | 'none' \n  | 'self' \n  | 'unsafe-inline' \n  | 'unsafe-eval' \n  | 'strict-dynamic'\n  | `'nonce-${string}'`\n  | `'${string}'`\n  | `https://${string}`\n  | `http://${string}`\n  | `*.${string}`\n  | string;\n\n/** Base interface for validation messages */\nexport interface BaseValidationMessage {\n  /** The directive this message applies to */\n  directive: string;\n  /** The actual message */\n  message: string;\n  /** Severity level */\n  severity: ValidationSeverity;\n  /** Line number in the original CSP */\n  line?: number;\n  /** Column number in the original CSP */\n  column?: number;\n  /** Offset in the original string */\n  offset?: number;\n  /** Length of the relevant text */\n  length?: number;\n  /** Suggestion for fixing the issue */\n  suggestion?: string;\n  /** Link to documentation */\n  documentationUrl?: string;\n  /** Additional context data */\n  meta?: Record<string, any>;\n}\n\n/** Error information for CSP validation */\nexport interface CspValidationError extends BaseValidationMessage {\n  severity: ValidationSeverity.ERROR | ValidationSeverity.CRITICAL;\n  errorCode: string;\n}\n\n/** Warning information for CSP validation */\nexport interface CspValidationWarning extends BaseValidationMessage {\n  severity: ValidationSeverity.WARNING | ValidationSeverity.INFO;\n  warningCode: string;\n}\n\n/** Parsed CSP directive with metadata */\nexport interface ParsedDirective {\n  /** Directive name */\n  name: string;\n  /** Directive values */\n  values: CspSource[];\n  /** Original source string */\n  source: string;\n  /** Start position in original CSP */\n  startIndex: number;\n  /** End position in original CSP */\n  endIndex: number;\n  /** Line number in original CSP */\n  line?: number;\n  /** Column number in original CSP */\n  column?: number;\n}\n\n/** Validation result for CSP */\nexport interface CspValidationResponse {\n  /** Whether the CSP is valid */\n  isValid: boolean;\n  /** List of errors */\n  errors: CspValidationError[];\n  /** List of warnings */\n  warnings: CspValidationWarning[];\n  /** List of recommendations */\n  recommendations: string[];\n  /** Parsed directives */\n  parsedDirectives: Record<string, CspSource[]>;\n  /** The original CSP string */\n  originalCsp?: string;\n  /** Metadata about the validation */\n  meta?: {\n    /** CSP level detected */\n    cspLevel?: '1' | '2' | '3';\n    /** Whether the CSP uses strict-dynamic */\n    usesStrictDynamic?: boolean;\n    /** Whether the CSP uses nonces or hashes */\n    usesNoncesOrHashes?: boolean;\n    /** List of directives that allow unsafe-inline */\n    allowsUnsafeInline?: string[];\n    /** List of directives that allow unsafe-eval */\n    allowsUnsafeEval?: string[];\n  };\n}\n\nexport type SecurityScanRequest = {\n  directory: string;\n  options?: {\n    recursive?: boolean;\n    checkDependencies?: boolean;\n    checkCsp?: boolean;\n  };\n};\n\nexport type SecurityScanResponse = {\n  summary: {\n    totalFiles: number;\n    issuesFound: number;\n    securityLevel: 'low' | 'medium' | 'high' | 'critical';\n    scanTime: number;\n  };\n  issues: Array<{\n    file: string;\n    line?: number;\n    column?: number;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    fix?: string;\n    codeSnippet?: string;\n  }>;\n};\n"]}