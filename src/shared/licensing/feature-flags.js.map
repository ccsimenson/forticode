{"version":3,"file":"feature-flags.js","sourceRoot":"","sources":["feature-flags.ts"],"names":[],"mappings":";;AAMA,4CAEC;AAKD,oDAMC;AAMD,wCAQC;AAMD,kCAQC;AAKD,0CAeC;AAnED,mCAA4C;AAC5C,uDAAmD;AAEnD;;GAEG;AACH,SAAgB,gBAAgB,CAAC,OAAgB;IAC/C,OAAO,gCAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AAED;;GAEG;AACH,SAAgB,oBAAoB;IAClC,OAAO,MAAM,CAAC,OAAO,CAAC,gBAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;QACvD,EAAE,EAAE,GAAG;QACP,GAAG,OAAO;QACV,SAAS,EAAE,gBAAgB,CAAC,GAAc,CAAC;KAC5C,CAAC,CAAC,CAAC;AACN,CAAC;AAED;;;GAGG;AACH,SAAgB,cAAc,CAAC,OAAgB;IAC7C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QAC/B,MAAM,WAAW,GAAG,gBAAQ,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,IAAI,KAAK,CACb,iBAAiB,WAAW,CAAC,IAAI,8BAA8B;YAC/D,qDAAqD,CACtD,CAAC;IACJ,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,SAAgB,WAAW,CACzB,OAAgB,EAChB,EAAK;IAEL,OAAO,CAAC,CAAC,GAAG,IAAmB,EAAE,EAAE;QACjC,cAAc,CAAC,OAAO,CAAC,CAAC;QACxB,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;IACrB,CAAC,CAAM,CAAC;AACV,CAAC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAC,OAAgB;IAC9C,OAAO,UACL,OAAY,EACZ,YAAoB,EACpB,UAA8B;QAE9B,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAExC,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;YACxC,cAAc,CAAC,OAAO,CAAC,CAAC;YACxB,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC;QAEF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { Feature, FEATURES } from './types';\nimport { licenseService } from './license-service';\n\n/**\n * Check if a specific feature is enabled for the current license\n */\nexport function isFeatureEnabled(feature: Feature): boolean {\n  return licenseService.isFeatureEnabled(feature);\n}\n\n/**\n * Get information about all available features and their activation status\n */\nexport function getAllFeaturesStatus() {\n  return Object.entries(FEATURES).map(([key, feature]) => ({\n    id: key,\n    ...feature,\n    isEnabled: isFeatureEnabled(key as Feature)\n  }));\n}\n\n/**\n * Require a specific feature to be enabled\n * @throws {Error} If the feature is not enabled\n */\nexport function requireFeature(feature: Feature): void {\n  if (!isFeatureEnabled(feature)) {\n    const featureInfo = FEATURES[feature];\n    throw new Error(\n      `This feature (${featureInfo.name}) requires a valid license. ` +\n      'Please upgrade your license to access this feature.'\n    );\n  }\n}\n\n/**\n * A higher-order function that only allows the wrapped function to be called\n * if the specified feature is enabled\n */\nexport function withFeature<T extends (...args: any[]) => any>(\n  feature: Feature,\n  fn: T\n): T {\n  return ((...args: Parameters<T>) => {\n    requireFeature(feature);\n    return fn(...args);\n  }) as T;\n}\n\n/**\n * A decorator that can be used to protect class methods with a feature flag\n */\nexport function requiresFeature(feature: Feature) {\n  return function (\n    _target: any,\n    _propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value;\n    \n    descriptor.value = function(...args: any[]) {\n      requireFeature(feature);\n      return originalMethod.apply(this, args);\n    };\n    \n    return descriptor;\n  };\n}\n"]}