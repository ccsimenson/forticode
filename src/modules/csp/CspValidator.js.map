{"version":3,"file":"CspValidator.js","sourceRoot":"","sources":["CspValidator.ts"],"names":[],"mappings":";;;AAAA,gDAAyD;AA0BzD,2BAA2B;AAC3B,MAAM,WAAW,GAAG;IAClB,kBAAkB,EAAE,oBAAoB;IACxC,gBAAgB,EAAE,kBAAkB;IACpC,iBAAiB,EAAE,mBAAmB;IACtC,yBAAyB,EAAE,2BAA2B;IACtD,0BAA0B,EAAE,4BAA4B;IACxD,oBAAoB,EAAE,sBAAsB;IAC5C,qBAAqB,EAAE,uBAAuB;IAC9C,eAAe,EAAE,iBAAiB;IAClC,iBAAiB,EAAE,mBAAmB;IACtC,aAAa,EAAE,eAAe;IAC9B,aAAa,EAAE,eAAe;IAC9B,YAAY,EAAE,cAAc;IAC5B,iBAAiB,EAAE,mBAAmB;IACtC,qBAAqB,EAAE,uBAAuB;IAC9C,0BAA0B,EAAE,4BAA4B;IACxD,eAAe,EAAE,iBAAiB;IAClC,qBAAqB,EAAE,uBAAuB;IAC9C,mBAAmB,EAAE,qBAAqB;IAC1C,kBAAkB,EAAE,oBAAoB;IACxC,gBAAgB,EAAE,kBAAkB;IACpC,iBAAiB,EAAE,mBAAmB;IACtC,oBAAoB,EAAE,sBAAsB;IAC5C,kBAAkB,EAAE,oBAAoB;IACxC,mBAAmB,EAAE,qBAAqB;IAC1C,kBAAkB,EAAE,oBAAoB;IACxC,kBAAkB,EAAE,oBAAoB;CAChC,CAAC;AAIX,6BAA6B;AAC7B,MAAM,aAAa,GAAG;IACpB,mBAAmB,EAAE,qBAAqB;IAC1C,aAAa,EAAE,eAAe;IAC9B,WAAW,EAAE,aAAa;IAC1B,eAAe,EAAE,iBAAiB;IAClC,WAAW,EAAE,aAAa;IAC1B,oBAAoB,EAAE,sBAAsB;IAC5C,oCAAoC,EAAE,sCAAsC;IAC5E,oBAAoB,EAAE,sBAAsB;IAC5C,0BAA0B,EAAE,4BAA4B;IACxD,kBAAkB,EAAE,oBAAoB;IACxC,gBAAgB,EAAE,kBAAkB;IACpC,mBAAmB,EAAE,qBAAqB;IAC1C,uBAAuB,EAAE,yBAAyB;IAClD,iBAAiB,EAAE,mBAAmB;IACtC,kBAAkB,EAAE,oBAAoB;IACxC,aAAa,EAAE,eAAe;IAC9B,qBAAqB,EAAE,uBAAuB;IAC9C,iBAAiB,EAAE,mBAAmB;IACtC,gBAAgB,EAAE,kBAAkB;IACpC,qBAAqB,EAAE,uBAAuB;CACtC,CAAC;AAqDX,+CAA+C;AAC/C,MAAM,cAAc,GAAG,IAAI,GAAG,EAAoC,CAAC;AACnE,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAAiC,CAAC;AAQvE,oCAAoC;AACpC,IAAI,eAAe,GAA4B,IAAI,CAAC;AAEpD,MAAa,YAAY;IACvB;;;OAGG;IACI,mBAAmB,CAAC,QAA2C;QACpE,kDAAkD;IACpD,CAAC;IAID,gBAAuB,CAAC;IAEjB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3B,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAC7C,CAAC;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,GAAW,EAAE,UAAgC,EAAE;QAChE,0CAA0C;QAC1C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;YAC5B,MAAM,YAAY,GAAG,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,YAAY,EAAE,CAAC;gBACjB,OAAO,EAAE,GAAG,YAAY,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;QAED,MAAM,MAAM,GAAwB;YAClC,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,eAAe,EAAE,EAAE;YACnB,gBAAgB,EAAE,EAAE;YACpB,IAAI,EAAE;gBACJ,QAAQ,EAAE,GAAG;gBACb,iBAAiB,EAAE,KAAK;gBACxB,kBAAkB,EAAE,KAAK;gBACzB,kBAAkB,EAAE,EAAE;gBACtB,gBAAgB,EAAE,EAAE;aACrB;SACF,CAAC;QAEF,IAAI,CAAC;YACH,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpB,SAAS,EAAE,EAAE;oBACb,OAAO,EAAE,mDAAmD;oBAC5D,SAAS,EAAE,WAAW,CAAC,kBAAkB;oBACzC,UAAU,EAAE,oCAAoC;iBACjD,CAAC,CAAC;gBACH,OAAO,MAA+B,CAAC;YACzC,CAAC;YAED,uBAAuB;YACvB,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,CAAC,gBAAgB,GAAG,EAAE,GAAG,UAAU,EAAE,CAAC;YAE5C,sCAAsC;YACtC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAExC,sBAAsB;YACtB,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAE5C,2BAA2B;YAC3B,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAEjD,gCAAgC;YAChC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;YAE5C,yCAAyC;YACzC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACpB,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAI,MAAgC,EAAE,CAAC,CAAC;YAClF,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACpB,SAAS,EAAE,EAAE;gBACb,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qCAAqC;gBACvF,SAAS,EAAE,WAAW,CAAC,gBAAgB;gBACvC,UAAU,EAAE,oCAAoC;aACjD,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;QAED,OAAO,MAA+B,CAAC;IACzC,CAAC;IAEO,QAAQ,CACd,MAA2B,EAC3B,KAAqF;QAErF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,GAAG;gBACZ,QAAQ,EAAE,GAAG;gBACb,iBAAiB,EAAE,KAAK;gBACxB,kBAAkB,EAAE,KAAK;gBACzB,kBAAkB,EAAE,EAAE;gBACtB,gBAAgB,EAAE,EAAE;aACrB,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GAAuB;YAC1C,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,EAAE;YAChC,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,QAAQ,EAAE,2BAAkB,CAAC,KAAK;YAClC,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,gBAAgB;YAC1D,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,EAAE;YAClC,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,OAAO,EAAE,KAAK,CAAC,OAAO;SACvB,CAAC;QAEF,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEpC,6CAA6C;QAC7C,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAEO,UAAU,CAChB,MAA2B,EAC3B,OAA2F;QAE3F,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,GAAG;gBACZ,QAAQ,EAAE,GAAG;gBACb,iBAAiB,EAAE,KAAK;gBACxB,kBAAkB,EAAE,KAAK;gBACzB,kBAAkB,EAAE,EAAE;gBACtB,gBAAgB,EAAE,EAAE;aACrB,CAAC;QACJ,CAAC;QAED,MAAM,iBAAiB,GAAyB;YAC9C,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,EAAE;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,QAAQ,EAAE,2BAAkB,CAAC,OAAO;YACpC,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,aAAa,CAAC,mBAAmB;YACrE,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,EAAE;YACpC,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC;QAEF,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,UAAoC,EAAE,MAA2B;QACtF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,GAAG;gBACZ,QAAQ,EAAE,GAAG;gBACb,iBAAiB,EAAE,KAAK;gBACxB,kBAAkB,EAAE,KAAK;gBACzB,kBAAkB,EAAE,EAAE;gBACtB,gBAAgB,EAAE,EAAE;aACrB,CAAC;QACJ,CAAC;QAED,sCAAsC;QACtC,MAAM,CAAC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAC9E,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAC/C,CAAC;QAEF,6BAA6B;QAC7B,MAAM,mBAAmB,GAAG;YAC1B,cAAc;YACd,eAAe;YACf,eAAe;YACf,eAAe;SAChB,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAC/E,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3D,CAAC;QAEF,6DAA6D;QAC7D,MAAM,CAAC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAElC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,EAAE;YACzD,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC;gBAClD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAID;;;;OAIG;IACK,QAAQ,CAAC,GAAW;QAC1B,mCAAmC;QACnC,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACpC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,0DAA0D;QAC1D,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,+CAA+C;QACvE,CAAC;QAED,MAAM,UAAU,GAA6B,EAAE,CAAC;QAChD,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,gBAAgB,GAAG,EAAE,CAAC;QAC1B,IAAI,aAAa,GAAa,EAAE,CAAC;QACjC,IAAI,YAAY,GAAG,EAAE,CAAC;QAEtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,IAAI,KAAK,SAAS;gBAAE,SAAS;YAEjC,gDAAgD;YAChD,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;gBACjC,QAAQ,GAAG,CAAC,QAAQ,CAAC;gBACrB,YAAY,IAAI,IAAI,CAAC;gBACrB,SAAS;YACX,CAAC;YAED,0DAA0D;YAC1D,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC9B,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;gBACnE,gBAAgB,GAAG,EAAE,CAAC;gBACtB,aAAa,GAAG,EAAE,CAAC;gBACnB,YAAY,GAAG,EAAE,CAAC;gBAClB,SAAS;YACX,CAAC;YAED,oDAAoD;YACpD,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClE,IAAI,YAAY,EAAE,CAAC;oBACjB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACjC,YAAY,GAAG,EAAE,CAAC;gBACpB,CAAC;gBACD,SAAS;YACX,CAAC;YAED,kFAAkF;YAClF,IAAI,YAAY,KAAK,EAAE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,IAAI,gBAAgB,KAAK,EAAE,EAAE,CAAC;gBACjF,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;oBACnD,SAAS,CAAC,0BAA0B;gBACtC,CAAC;gBACD,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACzC,CAAC;iBAAM,CAAC;gBACN,YAAY,IAAI,IAAI,CAAC;YACvB,CAAC;QACH,CAAC;QAED,6BAA6B;QAC7B,IAAI,gBAAgB,IAAI,YAAY,EAAE,CAAC;YACrC,IAAI,YAAY,EAAE,CAAC;gBACjB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACnC,CAAC;YACD,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;QACrE,CAAC;QAED,mBAAmB;QACnB,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,UAAU,EAAE,CAAC,CAAC;QAChD,OAAO,EAAE,GAAG,UAAU,EAAE,CAAC;IAC3B,CAAC;IAGD;;;OAGG;IACK,gBAAgB,CAAC,IAAY,EAAE,MAAgB,EAAE,UAAoC;QAC3F,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,2CAA2C;QAC3C,MAAM,cAAc,GAAG,MAAM;aAC1B,MAAM,CAAC,OAAO,CAAC;aACf,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aAClB,MAAM,CAAC,OAAO,CAAC,CAAC;QAEnB,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,UAAU,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC;QACpC,CAAC;aAAM,IAAI,IAAI,EAAE,CAAC;YAChB,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,aAAa,CAAC,KAAa,EAAE,SAAiB,EAAE,MAA2B;QACjF,MAAM,YAAY,GAAG,uCAAuC,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACpB,SAAS;gBACT,OAAO,EAAE,0BAA0B,SAAS,EAAE;gBAC9C,SAAS,EAAE,WAAW,CAAC,aAAa;gBACpC,UAAU,EAAE,wCAAwC;gBACpD,OAAO,EAAE,EAAE,KAAK,EAAE;aACnB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,YAAY,CAAC,IAAY,EAAE,SAAiB,EAAE,MAA2B;QAC/E,MAAM,WAAW,GAAG,4CAA4C,CAAC;QACjE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACpB,SAAS;gBACT,OAAO,EAAE,yBAAyB,SAAS,EAAE;gBAC7C,SAAS,EAAE,WAAW,CAAC,YAAY;gBACnC,UAAU,EAAE,gFAAgF;gBAC5F,OAAO,EAAE,EAAE,IAAI,EAAE;aAClB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,0BAA0B,CAAC,UAAoC,EAAE,MAA2B;QAClG,MAAM,WAAW,GAAG,WAAW,IAAI,UAAU,CAAC;QAC9C,MAAM,YAAY,GAAG,YAAY,IAAI,UAAU,CAAC;QAEhD,IAAI,YAAY,IAAI,CAAC,WAAW,EAAE,CAAC;YACjC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,SAAS,EAAE,YAAY;gBACvB,OAAO,EAAE,gDAAgD;gBACzD,WAAW,EAAE,aAAa,CAAC,qBAAqB;gBAChD,UAAU,EAAE,+CAA+C;aAC5D,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,WAAW,IAAI,CAAC,YAAY,EAAE,CAAC;YAClC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,SAAS,EAAE,WAAW;gBACtB,OAAO,EAAE,6BAA6B;gBACtC,WAAW,EAAE,aAAa,CAAC,iBAAiB;gBAC5C,UAAU,EAAE,mDAAmD;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,0BAA0B,CAAC,UAAoC,EAAE,MAA2B;QAClG,MAAM,kBAAkB,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3C,MAAM,qBAAqB,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;QAE3F,4BAA4B;QAC5B,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACrC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACtB,SAAS;oBACT,OAAO,EAAE,+BAA+B,SAAS,EAAE;oBACnD,WAAW,EAAE,aAAa,CAAC,0BAA0B;oBACrD,UAAU,EAAE,YAAY,SAAS,yBAAyB;iBAC3D,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,qBAAqB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACxC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC3B,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACtB,SAAS;oBACT,OAAO,EAAE,kCAAkC,SAAS,EAAE;oBACtD,WAAW,EAAE,aAAa,CAAC,WAAW,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAgC,CAAC;oBACjH,UAAU,EAAE,oBAAoB,SAAS,iCAAiC;iBAC3E,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,yBAAyB,CAAC,SAAiB,EAAE,MAAgB,EAAE,MAA2B;QAChG,MAAM,iBAAiB,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC3C,MAAM,iBAAiB,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;QAEzE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,oBAAoB;YACpB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;gBAAE,OAAO;YAE1B,+BAA+B;YAC/B,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;gBACrE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACtB,SAAS;oBACT,OAAO,EAAE,sBAAsB,KAAK,QAAQ,SAAS,EAAE;oBACvD,WAAW,EAAE,aAAa,CAAC,iBAAiB;oBAC5C,UAAU,EAAE,kDAAkD;iBAC/D,CAAC,CAAC;YACL,CAAC;YAED,+BAA+B;YAC/B,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBAC7D,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpB,SAAS;oBACT,OAAO,EAAE,wBAAwB,SAAS,KAAK,KAAK,EAAE;oBACtD,SAAS,EAAE,WAAW,CAAC,eAAe;oBACtC,UAAU,EAAE,6CAA6C;iBAC1D,CAAC,CAAC;YACL,CAAC;YAED,wBAAwB;YACxB,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YAC/C,CAAC;YAED,uBAAuB;YACvB,IAAI,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC9F,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YAED,0BAA0B;YAC1B,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACxD,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpB,SAAS;oBACT,OAAO,EAAE,6BAA6B,SAAS,EAAE;oBACjD,SAAS,EAAE,WAAW,CAAC,aAAa;oBACpC,UAAU,EAAE,4DAA4D;iBACzE,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACK,kBAAkB;QACxB,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,eAAe,CAAC;QACzB,CAAC;QAED,iCAAiC;QACjC,eAAe,GAAG;YAChB;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,QAAQ,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;aACrD;YACD;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,QAAQ,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;aACrD;YACD;gBACE,IAAI,EAAE,oBAAoB;gBAC1B,QAAQ,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE;oBAC/B,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,EAAE;wBACzD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;4BACtB,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;wBAC5D,CAAC;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC;aACF;YACD;gBACE,IAAI,EAAE,sBAAsB;gBAC5B,QAAQ,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE;oBAC/B,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;wBAC7B,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;oBACpE,CAAC;gBACH,CAAC;aACF;YACD;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,QAAQ,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE;oBAC/B,IAAI,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;wBAC5B,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,MAAM,CAAC,CAAC;oBAClE,CAAC;gBACH,CAAC;aACF;SACF,CAAC;QAEF,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;OAGG;IACK,kBAAkB,CAAC,UAAoC,EAAE,MAA2B;QAC1F,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAExC,+BAA+B;QAC/B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC;gBACH,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACpC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,IAAI,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,0BAA0B,CAAC,MAAgB,EAAE,MAA2B;QAC9E,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACzD,MAAM,gBAAgB,GAAG,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC3D,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvF,IAAI,eAAe,IAAI,CAAC,gBAAgB,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5D,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,SAAS,EAAE,YAAY;gBACvB,OAAO,EAAE,qDAAqD;gBAC9D,WAAW,EAAE,aAAa,CAAC,oCAAoC;gBAC/D,UAAU,EAAE,gEAAgE;aAC7E,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,yBAAyB,CAAC,MAAgB,EAAE,MAA2B;QAC7E,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QACzD,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAEvF,IAAI,eAAe,IAAI,CAAC,cAAc,EAAE,CAAC;YACvC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACtB,SAAS,EAAE,WAAW;gBACtB,OAAO,EAAE,qCAAqC;gBAC9C,WAAW,EAAE,aAAa,CAAC,aAAa;gBACxC,UAAU,EAAE,+CAA+C;aAC5D,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;OAGG;IACH;;;OAGG;IACI,UAAU;QACf,cAAc,CAAC,KAAK,EAAE,CAAC;QACvB,qBAAqB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAEO,uBAAuB,CAAC,UAAoC,EAAE,MAA2B;QAC/F,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,wCAAwC;QACxC,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC;YACnD,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACxF,eAAe,CAAC,IAAI,CAClB,+FAA+F,CAChG,CAAC;QACJ,CAAC;QAED,wBAAwB;QACxB,IAAI,UAAU,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;YACtD,eAAe,CAAC,IAAI,CAClB,oFAAoF;gBACpF,0CAA0C,CAC3C,CAAC;QACJ,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAC9B,eAAe,CAAC,IAAI,CAClB,4DAA4D;gBAC5D,8DAA8D,CAC/D,CAAC;QACJ,CAAC;QAED,oCAAoC;QACpC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACnC,eAAe,CAAC,IAAI,CAClB,2FAA2F;gBAC3F,2CAA2C,CAC5C,CAAC;QACJ,CAAC;QAED,gCAAgC;QAChC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC;YAC/B,eAAe,CAAC,IAAI,CAClB,wEAAwE;gBACxE,iDAAiD,CAClD,CAAC;QACJ,CAAC;QAED,iCAAiC;QACjC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAC9D,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CACxC,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAC/D,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CACzC,CAAC;QAEF,IAAI,OAAO,IAAI,QAAQ,EAAE,CAAC;YACxB,eAAe,CAAC,IAAI,CAClB,qEAAqE;gBACrE,mDAAmD,CACpD,CAAC;QACJ,CAAC;QAED,kCAAkC;QAClC,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YACzD,eAAe,CAAC,IAAI,CAClB,gEAAgE;gBAChE,gDAAgD,CACjD,CAAC;QACJ,CAAC;QAED,oCAAoC;QACpC,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,CAAC,eAAe,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,IAAI,EAAE,CAAC,EAAE,GAAG,eAAe,CAAC,CAAC;QACnF,CAAC;IACH,CAAC;CACF;AA1nBD,oCA0nBC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import { ValidationSeverity } from '../../shared/ipc.js';\n\n// CSP Level types\ntype CspLevel = '1' | '2' | '3';\n\n// CSP Directives - used for type checking\ntype CspDirective = \n  | 'default-src' | 'script-src' | 'style-src' | 'img-src' | 'connect-src'\n  | 'font-src' | 'object-src' | 'media-src' | 'frame-src' | 'child-src'\n  | 'frame-ancestors' | 'form-action' | 'base-uri' | 'sandbox' | 'report-uri'\n  | 'report-to' | 'worker-src' | 'manifest-src' | 'prefetch-src' | 'navigate-to'\n  | 'script-src-attr' | 'script-src-elem' | 'style-src-attr' | 'style-src-elem';\n\n// CSP Source Expressions - used for type checking\ntype CspSourceExpression = \n  | \"'none'\" | \"'self'\" | \"'unsafe-inline'\" | \"'unsafe-eval'\" | \"'strict-dynamic'\"\n  | \"'unsafe-hashes'\" | \"'report-sample'\" | \"'wasm-unsafe-eval'\"\n  | `'nonce-${string}'`\n  | `'sha256-${string}'` | `'sha384-${string}'` | `'sha512-${string}'`\n  | 'http:' | 'https:' | 'data:' | 'blob:' | 'filesystem:' | 'mediastream:'\n  | `http://${string}` | `https://${string}`\n  | 'self' | 'unsafe-inline' | 'unsafe-eval' | string;\n\n// Export types to avoid unused warnings\nexport type { CspDirective, CspSourceExpression };\n\n// Error codes as constants\nconst ERROR_CODES = {\n  INVALID_CSP_STRING: 'INVALID_CSP_STRING',\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  INVALID_DIRECTIVE: 'INVALID_DIRECTIVE',\n  INVALID_SOURCE_EXPRESSION: 'INVALID_SOURCE_EXPRESSION',\n  MISSING_REQUIRED_DIRECTIVE: 'MISSING_REQUIRED_DIRECTIVE',\n  DEPRECATED_DIRECTIVE: 'DEPRECATED_DIRECTIVE',\n  UNNECESSARY_DIRECTIVE: 'UNNECESSARY_DIRECTIVE',\n  INSECURE_SOURCE: 'INSECURE_SOURCE',\n  MISSING_REPORTING: 'MISSING_REPORTING',\n  MIXED_CONTENT: 'MIXED_CONTENT',\n  INVALID_NONCE: 'INVALID_NONCE',\n  INVALID_HASH: 'INVALID_HASH',\n  DEPRECATED_SOURCE: 'DEPRECATED_SOURCE',\n  BROWSER_COMPATIBILITY: 'BROWSER_COMPATIBILITY',\n  INVALID_REPORTING_ENDPOINT: 'INVALID_REPORTING_ENDPOINT',\n  INVALID_SANDBOX: 'INVALID_SANDBOX',\n  INVALID_TRUSTED_TYPES: 'INVALID_TRUSTED_TYPES',\n  INSECURE_SCRIPT_SRC: 'INSECURE_SCRIPT_SRC',\n  INSECURE_STYLE_SRC: 'INSECURE_STYLE_SRC',\n  INSECURE_IMG_SRC: 'INSECURE_IMG_SRC',\n  INSECURE_FONT_SRC: 'INSECURE_FONT_SRC',\n  INSECURE_CONNECT_SRC: 'INSECURE_CONNECT_SRC',\n  INSECURE_MEDIA_SRC: 'INSECURE_MEDIA_SRC',\n  INSECURE_OBJECT_SRC: 'INSECURE_OBJECT_SRC',\n  INSECURE_FRAME_SRC: 'INSECURE_FRAME_SRC',\n  INSECURE_CHILD_SRC: 'INSECURE_CHILD_SRC'\n} as const;\n\ntype ErrorCode = typeof ERROR_CODES[keyof typeof ERROR_CODES];\n\n// Warning codes as constants\nconst WARNING_CODES = {\n  MISSING_DEFAULT_SRC: 'MISSING_DEFAULT_SRC',\n  UNSAFE_INLINE: 'UNSAFE_INLINE',\n  UNSAFE_EVAL: 'UNSAFE_EVAL',\n  WILDCARD_SOURCE: 'WILDCARD_SOURCE',\n  HTTP_SOURCE: 'HTTP_SOURCE',\n  DEPRECATED_DIRECTIVE: 'DEPRECATED_DIRECTIVE',\n  UNSAFE_INLINE_WITHOUT_STRICT_DYNAMIC: 'UNSAFE_INLINE_WITHOUT_STRICT_DYNAMIC',\n  UNSAFE_EVAL_DETECTED: 'UNSAFE_EVAL_DETECTED',\n  MISSING_REQUIRED_DIRECTIVE: 'MISSING_REQUIRED_DIRECTIVE',\n  MISSING_OBJECT_SRC: 'MISSING_OBJECT_SRC',\n  MISSING_BASE_URI: 'MISSING_BASE_URI',\n  MISSING_FORM_ACTION: 'MISSING_FORM_ACTION',\n  MISSING_FRAME_ANCESTORS: 'MISSING_FRAME_ANCESTORS',\n  MISSING_REPORT_TO: 'MISSING_REPORT_TO',\n  MISSING_REPORT_URI: 'MISSING_REPORT_URI',\n  MIXED_CONTENT: 'MIXED_CONTENT',\n  DEPRECATED_REPORT_URI: 'DEPRECATED_REPORT_URI',\n  DEPRECATED_SOURCE: 'DEPRECATED_SOURCE',\n  LEGACY_DIRECTIVE: 'LEGACY_DIRECTIVE',\n  MISSING_TRUSTED_TYPES: 'MISSING_TRUSTED_TYPES'\n} as const;\n\ntype WarningCode = typeof WARNING_CODES[keyof typeof WARNING_CODES];\n\n// CSP Validation Metadata\ninterface CspValidationMeta {\n  cspLevel: CspLevel;\n  usesStrictDynamic: boolean;\n  usesNoncesOrHashes: boolean;\n  allowsUnsafeInline: string[];\n  allowsUnsafeEval: string[];\n}\n\ninterface CspValidationResult {\n  isValid: boolean;\n  errors: CspValidationError[];\n  warnings: CspValidationWarning[];\n  recommendations: string[];\n  parsedDirectives: Record<string, string[]>;\n  meta: CspValidationMeta;\n}\n\ninterface CspValidationOptions {\n  filePath?: string;\n  strict?: boolean;\n}\n\ninterface CspValidationError {\n  directive: string;\n  message: string;\n  severity: ValidationSeverity.ERROR;\n  errorCode: ErrorCode;\n  suggestion?: string;\n  line?: number;\n  column?: number;\n  context?: Record<string, unknown>;\n}\n\ninterface CspValidationWarning {\n  directive: string;\n  message: string;\n  severity: ValidationSeverity.WARNING;\n  warningCode: WarningCode;\n  suggestion?: string;\n  line?: number;\n  column?: number;\n  context?: Record<string, unknown>;\n}\n\ninterface CspValidationResponse extends CspValidationResult {\n  // Add any additional response properties here\n}\n\n// Caches for parsed CSP and validation results\nconst parsedCspCache = new Map<string, Record<string, string[]>>();\nconst validationResultCache = new Map<string, CspValidationResponse>();\n\n// Lazy-loaded validation rules\ninterface ValidationRule {\n  name: string;\n  validate: (directives: Record<string, string[]>, result: CspValidationResult) => void;\n}\n\n// Cache for loaded validation rules\nlet validationRules: ValidationRule[] | null = null;\n\nexport class CspValidator {\n  /**\n   * Registers IPC handlers for CSP validation\n   * @param ipcMain The Electron ipcMain module\n   */\n  public registerIpcHandlers(_ipcMain: typeof import('electron').ipcMain): void {\n    // TODO: Implement IPC handlers for CSP validation\n  }\n\n  private static instance: CspValidator;\n\n  private constructor() {}\n\n  public static getInstance(): CspValidator {\n    if (!CspValidator.instance) {\n      CspValidator.instance = new CspValidator();\n    }\n    return CspValidator.instance;\n  }\n\n  /**\n   * Validates a CSP string against security best practices\n   */\n  public validateCsp(csp: string, options: CspValidationOptions = {}): CspValidationResponse {\n    // Check cache first if not in strict mode\n    if (!options.strict) {\n      const cacheKey = csp.trim();\n      const cachedResult = validationResultCache.get(cacheKey);\n      if (cachedResult) {\n        return { ...cachedResult };\n      }\n    }\n\n    const result: CspValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      parsedDirectives: {},\n      meta: {\n        cspLevel: '3',\n        usesStrictDynamic: false,\n        usesNoncesOrHashes: false,\n        allowsUnsafeInline: [],\n        allowsUnsafeEval: []\n      }\n    };\n\n    try {\n      if (!csp || typeof csp !== 'string') {\n        this.addError(result, {\n          directive: '',\n          message: 'Invalid CSP: Empty or invalid CSP string provided',\n          errorCode: ERROR_CODES.INVALID_CSP_STRING,\n          suggestion: 'Check the CSP syntax and try again'\n        });\n        return result as CspValidationResponse;\n      }\n\n      // Parse the CSP string\n      const directives = this.parseCsp(csp);\n      result.parsedDirectives = { ...directives };\n\n      // Update metadata based on directives\n      this.updateMetadata(directives, result);\n\n      // Validate directives\n      this.validateDirectives(directives, result);\n\n      // Generate recommendations\n      this.generateRecommendations(directives, result);\n\n      // Check if there are any errors\n      result.isValid = result.errors.length === 0;\n\n      // Cache the result if not in strict mode\n      if (!options.strict) {\n        validationResultCache.set(csp.trim(), { ...(result as CspValidationResponse) });\n      }\n    } catch (error) {\n      this.addError(result, {\n        directive: '',\n        message: error instanceof Error ? error.message : 'Unknown error during CSP validation',\n        errorCode: ERROR_CODES.VALIDATION_ERROR,\n        suggestion: 'Check the CSP syntax and try again'\n      });\n      result.isValid = false;\n    }\n\n    return result as CspValidationResponse;\n  }\n\n  private addError(\n    result: CspValidationResult, \n    error: Omit<CspValidationError, 'severity'> & { severity?: ValidationSeverity.ERROR }\n  ): void {\n    if (!result.meta) {\n      result.meta = {\n        cspLevel: '3',\n        usesStrictDynamic: false,\n        usesNoncesOrHashes: false,\n        allowsUnsafeInline: [],\n        allowsUnsafeEval: []\n      };\n    }\n    \n    const validationError: CspValidationError = {\n      directive: error.directive || '',\n      message: error.message,\n      severity: ValidationSeverity.ERROR,\n      errorCode: error.errorCode || ERROR_CODES.VALIDATION_ERROR,\n      suggestion: error.suggestion || '',\n      line: error.line,\n      column: error.column,\n      context: error.context\n    };\n    \n    result.errors = result.errors || [];\n    result.errors.push(validationError);\n    \n    // Mark result as invalid when we have errors\n    result.isValid = false;\n  }\n\n  private addWarning(\n    result: CspValidationResult, \n    warning: Omit<CspValidationWarning, 'severity'> & { severity?: ValidationSeverity.WARNING }\n  ): void {\n    if (!result.meta) {\n      result.meta = {\n        cspLevel: '3',\n        usesStrictDynamic: false,\n        usesNoncesOrHashes: false,\n        allowsUnsafeInline: [],\n        allowsUnsafeEval: []\n      };\n    }\n    \n    const validationWarning: CspValidationWarning = {\n      directive: warning.directive || '',\n      message: warning.message,\n      severity: ValidationSeverity.WARNING,\n      warningCode: warning.warningCode || WARNING_CODES.MISSING_DEFAULT_SRC,\n      suggestion: warning.suggestion || '',\n      line: warning.line,\n      column: warning.column,\n      context: warning.context\n    };\n    \n    result.warnings = result.warnings || [];\n    result.warnings.push(validationWarning);\n  }\n\n  /**\n   * Updates metadata based on parsed directives\n   */\n  private updateMetadata(directives: Record<string, string[]>, result: CspValidationResult): void {\n    if (!result.meta) {\n      result.meta = {\n        cspLevel: '3',\n        usesStrictDynamic: false,\n        usesNoncesOrHashes: false,\n        allowsUnsafeInline: [],\n        allowsUnsafeEval: []\n      };\n    }\n\n    // Update metadata based on directives\n    result.meta.usesStrictDynamic = Object.entries(directives).some(([_, values]) => \n      values.some(v => v.includes('strict-dynamic'))\n    );\n    \n    // Check for nonces or hashes\n    const nonceOrHashPatterns = [\n      /^'nonce-.*'$/,\n      /^'sha256-.*'$/,\n      /^'sha384-.*'$/,\n      /^'sha512-.*'$/\n    ];\n    \n    result.meta.usesNoncesOrHashes = Object.entries(directives).some(([_, values]) =>\n      values.some(v => nonceOrHashPatterns.some(p => p.test(v)))\n    );\n    \n    // Track which directives allow unsafe-inline and unsafe-eval\n    result.meta.allowsUnsafeInline = [];\n    result.meta.allowsUnsafeEval = [];\n    \n    Object.entries(directives).forEach(([directive, values]) => {\n      if (values.some(v => v.includes('unsafe-inline'))) {\n        result.meta.allowsUnsafeInline.push(directive);\n      }\n      if (values.some(v => v.includes('unsafe-eval'))) {\n        result.meta.allowsUnsafeEval.push(directive);\n      }\n    });\n  }\n\n\n\n  /**\n   * Parses a CSP string into a directives object with optimized parsing\n   * @param csp The CSP string to parse\n   * @returns Object with directive names as keys and arrays of source expressions as values\n   */\n  private parseCsp(csp: string): Record<string, string[]> {\n    // Check for empty or invalid input\n    if (!csp || typeof csp !== 'string') {\n      return {};\n    }\n    \n    // Check cache first - use a simple hash for the cache key\n    const cacheKey = csp.trim();\n    const cached = parsedCspCache.get(cacheKey);\n    if (cached) {\n      return { ...cached }; // Return a copy to prevent direct modification\n    }\n\n    const directives: Record<string, string[]> = {};\n    let inQuotes = false;\n    let currentDirective = '';\n    let currentValues: string[] = [];\n    let currentValue = '';\n\n    for (let i = 0; i < csp.length; i++) {\n      const char = csp[i];\n      if (char === undefined) continue;\n      \n      // Toggle inQuotes flag when encountering quotes\n      if (char === '\"' || char === \"'\") {\n        inQuotes = !inQuotes;\n        currentValue += char;\n        continue;\n      }\n\n      // Process semicolon (end of directive) when not in quotes\n      if (char === ';' && !inQuotes) {\n        this.processDirective(currentDirective, currentValues, directives);\n        currentDirective = '';\n        currentValues = [];\n        currentValue = '';\n        continue;\n      }\n\n      // Process whitespace (separator) when not in quotes\n      if ((char === ' ' || char === '\\t' || char === '\\n') && !inQuotes) {\n        if (currentValue) {\n          currentValues.push(currentValue);\n          currentValue = '';\n        }\n        continue;\n      }\n\n      // If we haven't found the first space yet, we're still reading the directive name\n      if (currentValue === '' && currentValues.length === 0 && currentDirective === '') {\n        if (char === ' ' || char === '\\t' || char === '\\n') {\n          continue; // Skip leading whitespace\n        }\n        currentDirective += char.toLowerCase();\n      } else {\n        currentValue += char;\n      }\n    }\n\n    // Process the last directive\n    if (currentDirective || currentValue) {\n      if (currentValue) {\n        currentValues.push(currentValue);\n      }\n      this.processDirective(currentDirective, currentValues, directives);\n    }\n\n    // Cache the result\n    parsedCspCache.set(cacheKey, { ...directives });\n    return { ...directives };\n  }\n\n\n  /**\n   * Helper method to process and store a single directive\n   * @private\n   */\n  private processDirective(name: string, values: string[], directives: Record<string, string[]>): void {\n    if (!name) return;\n    \n    // Filter out empty strings and trim values\n    const filteredValues = values\n      .filter(Boolean)\n      .map(v => v.trim())\n      .filter(Boolean);\n    \n    if (filteredValues.length > 0) {\n      directives[name] = filteredValues;\n    } else if (name) {\n      directives[name] = [];\n    }\n  }\n\n  /**\n   * Validates nonce values in CSP directives\n   * @private\n   */\n  private validateNonce(nonce: string, directive: string, result: CspValidationResult): void {\n    const noncePattern = /^'nonce-([A-Za-z0-9+/=_-])+[=]{0,2}'$/;\n    if (!noncePattern.test(nonce)) {\n      this.addError(result, {\n        directive,\n        message: `Invalid nonce value in ${directive}`,\n        errorCode: ERROR_CODES.INVALID_NONCE,\n        suggestion: 'Use a valid base64-encoded nonce value',\n        context: { nonce }\n      });\n    }\n  }\n\n  /**\n   * Validates hash values in CSP directives\n   * @private\n   */\n  private validateHash(hash: string, directive: string, result: CspValidationResult): void {\n    const hashPattern = /^'(sha256|sha384|sha512)-[A-Za-z0-9+/=]+'$/;\n    if (!hashPattern.test(hash)) {\n      this.addError(result, {\n        directive,\n        message: `Invalid hash value in ${directive}`,\n        errorCode: ERROR_CODES.INVALID_HASH,\n        suggestion: 'Use a valid hash value (sha256-, sha384-, or sha512- prefix with base64 value)',\n        context: { hash }\n      });\n    }\n  }\n\n  /**\n   * Validates reporting endpoints\n   * @private\n   */\n  private validateReportingEndpoints(directives: Record<string, string[]>, result: CspValidationResult): void {\n    const hasReportTo = 'report-to' in directives;\n    const hasReportUri = 'report-uri' in directives;\n    \n    if (hasReportUri && !hasReportTo) {\n      this.addWarning(result, {\n        directive: 'report-uri',\n        message: 'report-uri is deprecated in favor of report-to',\n        warningCode: WARNING_CODES.DEPRECATED_REPORT_URI,\n        suggestion: 'Use report-to directive instead of report-uri'\n      });\n    }\n\n    if (!hasReportTo && !hasReportUri) {\n      this.addWarning(result, {\n        directive: 'report-to',\n        message: 'Missing reporting directive',\n        warningCode: WARNING_CODES.MISSING_REPORT_TO,\n        suggestion: 'Add report-to directive to monitor CSP violations'\n      });\n    }\n  }\n\n  /**\n   * Validates security-related directives\n   * @private\n   */\n  private validateSecurityDirectives(directives: Record<string, string[]>, result: CspValidationResult): void {\n    const requiredDirectives = ['default-src'];\n    const recommendedDirectives = ['object-src', 'base-uri', 'form-action', 'frame-ancestors'];\n    \n    // Check required directives\n    requiredDirectives.forEach(directive => {\n      if (!directives[directive]) {\n        this.addWarning(result, {\n          directive,\n          message: `Missing required directive: ${directive}`,\n          warningCode: WARNING_CODES.MISSING_REQUIRED_DIRECTIVE,\n          suggestion: `Add the '${directive}' directive to your CSP`\n        });\n      }\n    });\n\n    // Check recommended directives\n    recommendedDirectives.forEach(directive => {\n      if (!directives[directive]) {\n        this.addWarning(result, {\n          directive,\n          message: `Recommended directive missing: ${directive}`,\n          warningCode: WARNING_CODES[`MISSING_${directive.replace(/-/g, '_').toUpperCase()}` as keyof typeof WARNING_CODES],\n          suggestion: `Consider adding '${directive}' directive for better security`\n        });\n      }\n    });\n  }\n\n  /**\n   * Validates source expressions in directives\n   * @private\n   */\n  private validateSourceExpressions(directive: string, values: string[], result: CspValidationResult): void {\n    const insecureProtocols = ['http:', 'ws:'];\n    const deprecatedSources = ['*', 'data:', 'unsafe-inline', 'unsafe-eval'];\n    \n    values.forEach(value => {\n      // Skip empty values\n      if (!value.trim()) return;\n\n      // Check for deprecated sources\n      if (deprecatedSources.some(deprecated => value.includes(deprecated))) {\n        this.addWarning(result, {\n          directive,\n          message: `Deprecated source '${value}' in ${directive}`,\n          warningCode: WARNING_CODES.DEPRECATED_SOURCE,\n          suggestion: 'Use more restrictive sources for better security'\n        });\n      }\n\n      // Check for insecure protocols\n      if (insecureProtocols.some(proto => value.startsWith(proto))) {\n        this.addError(result, {\n          directive,\n          message: `Insecure protocol in ${directive}: ${value}`,\n          errorCode: ERROR_CODES.INSECURE_SOURCE,\n          suggestion: 'Use secure protocols (https:, wss:) instead'\n        });\n      }\n\n      // Validate nonce values\n      if (value.startsWith('nonce-')) {\n        this.validateNonce(value, directive, result);\n      }\n      \n      // Validate hash values\n      if (value.startsWith('sha256-') || value.startsWith('sha384-') || value.startsWith('sha512-')) {\n        this.validateHash(value, directive, result);\n      }\n\n      // Check for mixed content\n      if (value.includes('http:') && value.includes('https:')) {\n        this.addError(result, {\n          directive,\n          message: `Mixed content detected in ${directive}`,\n          errorCode: ERROR_CODES.MIXED_CONTENT,\n          suggestion: 'Use consistent protocol (preferably HTTPS) for all sources'\n        });\n      }\n    });\n  }\n\n  /**\n   * Gets validation rules, loading them if not already loaded\n   * @private\n   */\n  private getValidationRules(): ValidationRule[] {\n    if (validationRules) {\n      return validationRules;\n    }\n\n    // Define validation rules lazily\n    validationRules = [\n      {\n        name: 'security-directives',\n        validate: this.validateSecurityDirectives.bind(this)\n      },\n      {\n        name: 'reporting-endpoints',\n        validate: this.validateReportingEndpoints.bind(this)\n      },\n      {\n        name: 'source-expressions',\n        validate: (directives, result) => {\n          Object.entries(directives).forEach(([directive, values]) => {\n            if (values.length > 0) {\n              this.validateSourceExpressions(directive, values, result);\n            }\n          });\n        }\n      },\n      {\n        name: 'script-src-directive',\n        validate: (directives, result) => {\n          if (directives['script-src']) {\n            this.validateScriptSrcDirective(directives['script-src'], result);\n          }\n        }\n      },\n      {\n        name: 'style-src-directive',\n        validate: (directives, result) => {\n          if (directives['style-src']) {\n            this.validateStyleSrcDirective(directives['style-src'], result);\n          }\n        }\n      }\n    ];\n\n    return validationRules;\n  }\n\n  /**\n   * Validates directives using lazy-loaded rules\n   * @private\n   */\n  private validateDirectives(directives: Record<string, string[]>, result: CspValidationResult): void {\n    const rules = this.getValidationRules();\n    \n    // Execute each validation rule\n    for (const rule of rules) {\n      try {\n        rule.validate(directives, result);\n      } catch (error) {\n        console.error(`Error executing validation rule ${rule.name}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Validates script-src directive specifically\n   * @private\n   */\n  private validateScriptSrcDirective(values: string[], result: CspValidationResult): void {\n    const hasUnsafeInline = values.includes('unsafe-inline');\n    const hasStrictDynamic = values.includes('strict-dynamic');\n    const hasNonceOrHash = values.some(v => v.startsWith('nonce-') || v.startsWith('sha'));\n\n    if (hasUnsafeInline && !hasStrictDynamic && !hasNonceOrHash) {\n      this.addWarning(result, {\n        directive: 'script-src',\n        message: 'unsafe-inline without nonce, hash or strict-dynamic',\n        warningCode: WARNING_CODES.UNSAFE_INLINE_WITHOUT_STRICT_DYNAMIC,\n        suggestion: 'Use nonces, hashes, or strict-dynamic instead of unsafe-inline'\n      });\n    }\n  }\n\n  /**\n   * Validates style-src directive specifically\n   * @private\n   */\n  private validateStyleSrcDirective(values: string[], result: CspValidationResult): void {\n    const hasUnsafeInline = values.includes('unsafe-inline');\n    const hasNonceOrHash = values.some(v => v.startsWith('nonce-') || v.startsWith('sha'));\n\n    if (hasUnsafeInline && !hasNonceOrHash) {\n      this.addWarning(result, {\n        directive: 'style-src',\n        message: 'unsafe-inline without nonce or hash',\n        warningCode: WARNING_CODES.UNSAFE_INLINE,\n        suggestion: 'Use nonces or hashes instead of unsafe-inline'\n      });\n    }\n  }\n\n  /**\n   * Generates security recommendations based on the validation results\n   * @private\n   */\n  /**\n   * Clears the validation cache\n   * Can be called when memory usage needs to be managed\n   */\n  public clearCache(): void {\n    parsedCspCache.clear();\n    validationResultCache.clear();\n  }\n\n  private generateRecommendations(directives: Record<string, string[]>, result: CspValidationResult): void {\n    const recommendations: string[] = [];\n\n    // Check for unsafe-inline in script-src\n    if (directives['script-src']?.includes('unsafe-inline') && \n        !directives['script-src']?.some(v => v.startsWith('nonce-') || v.startsWith('sha'))) {\n      recommendations.push(\n        'Consider replacing \\'unsafe-inline\\' in script-src with nonces or hashes for better security.'\n      );\n    }\n\n    // Check for unsafe-eval\n    if (directives['script-src']?.includes('unsafe-eval')) {\n      recommendations.push(\n        'Avoid using \\'unsafe-eval\\' in script-src as it allows execution of dynamic code. ' +\n        'Refactor code to use safer alternatives.'\n      );\n    }\n\n    // Check for missing object-src\n    if (!directives['object-src']) {\n      recommendations.push(\n        'Add object-src directive to prevent injection of plugins. ' +\n        'Consider using \\'object-src \\'none\\'\\' for maximum security.'\n      );\n    }\n\n    // Check for missing frame-ancestors\n    if (!directives['frame-ancestors']) {\n      recommendations.push(\n        'Consider adding frame-ancestors directive to control which sites can embed your content. ' +\n        'For example: \\'frame-ancestors \\'self\\'\\''\n      );\n    }\n\n    // Check for missing default-src\n    if (!directives['default-src']) {\n      recommendations.push(\n        'Add a default-src directive as a fallback for other fetch directives. ' +\n        'This provides a security baseline for your CSP.'\n      );\n    }\n\n    // Check for mixed content issues\n    const hasHttp = Object.entries(directives).some(([_, values]) => \n      values.some(v => v.startsWith('http:'))\n    );\n    const hasHttps = Object.entries(directives).some(([_, values]) => \n      values.some(v => v.startsWith('https:'))\n    );\n    \n    if (hasHttp && hasHttps) {\n      recommendations.push(\n        'Mixed content detected: both HTTP and HTTPS sources are specified. ' +\n        'Consider using HTTPS exclusively for all sources.'\n      );\n    }\n\n    // Check for deprecated report-uri\n    if (directives['report-uri'] && !directives['report-to']) {\n      recommendations.push(\n        'The report-uri directive is deprecated in favor of report-to. ' +\n        'Consider migrating to the newer Reporting API.'\n      );\n    }\n\n    // Add recommendations to the result\n    if (recommendations.length > 0) {\n      result.recommendations = [...(result.recommendations || []), ...recommendations];\n    }\n  }\n}\n\nexport default CspValidator;\n"]}